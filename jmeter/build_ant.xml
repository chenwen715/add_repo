<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project name="ant-jmeter" default="all">
    <description>

        Sample build file for use with ant-jmeter.jar
        See http://www.programmerplanet.org/pages/projects/jmeter-ant-task.php

    To run a test and create the output report:
        ant -Dtest=script

    To run a test only:
        ant -Dtest=script run

    To run report on existing test output
        ant -Dtest=script report

    The "script" parameter is the name of the script without the .jmx suffix.

    Additional options:
        -Dshow-data=y - include response data in Failure Details
        -Dtestpath=xyz - path to test file(s) (default user.dir).
                         N.B. Ant interprets relative paths against the build file
        -Djmeter.home=.. - path to JMeter home directory (defaults to parent of this build file)
        -Dreport.title="My Report" - title for html report (default is 'Load Test Results')
    </description>

    <!--property name="XX" value="XX" 定义变量并赋值，减少配置工作量-->

    <!--testpath定义测试文件目录-->
    <!--?有问题${user.dir}为当前目录，其指向%JEMETER_HOME%，而不是%JEMETER_HOME%\extras-->
    <!--因为我们在%JEMETER_HOME%中定义了一个批处理文件run.bat，用于启动ant，ant来解析该build.xml文件-->
    <!--${user.dir}为run.bat所在目录-->
    <!--property name="testpath" value="${user.dir}"/-->
    <property name="testpath" value="D:\learn\add_repo\jmeter"/>
    <!--定义JMETER工作目录，${basedir}/..为JEMETER_HOME-->
    <property name="jmeter.home" value="${basedir}/.."/>
    <!--定义jmeter测试脚本存放目录-->
    <property name="script.dir" value="${testpath}\scripts"/>
    <!--定义jmeter测试结果存放目录-->
    <property name="result.dir" value="${testpath}\results"/>
    <!--定义测试报告的开头-->
    <property name="report.title" value="Load_Test_Results性能测试报告"/>


    <!-- Name of test (without .jmx) 定义测试结果名称，或测试脚本名称-->
    <property name="test" value="Test"/>
    <!-- Should report include response data for failures? 是否显示失败事务，n为不显示-->
    <property name="show-data" value="n"/>
    <!--定义样式版本-->
    <property name="format" value="2.1"/>

    <condition property="style_version" value="_21">
        <equals arg1="${format}" arg2="2.1"/>
    </condition>

    <condition property="funcMode">
        <equals arg1="${show-data}" arg2="y"/>
    </condition>

    <condition property="funcMode" value="false">
      <not>
        <equals arg1="${show-data}" arg2="y"/>
      </not>
    </condition>

    <!-- 定义依赖包目录Allow jar to be picked up locally -->
    <!--${basedir}为当前文件所在目录-->
    <path id="jmeter.classpath">
        <fileset dir="${basedir}">
          <!--把ant-jmeter开头的jar包都引人，*一般为版本信息，e.g.ant-jmeter-1.1.1.jar-->
          <include name="ant-jmeter*.jar"/>
        </fileset>
    </path>

    <!--定义任务，即测试活动，依赖于ant-jmeter-1.1.1.jar包-->
    <taskdef
        name="jmeter"
        classpathref="jmeter.classpath"
        classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"/>

    <!--定义任务，一个为run即运行脚本，一个为report即生成报告-->
    <target name="all" depends="run,report"/>
    <!--定义run任务-->
    <target name="run">
        <echo>funcMode = ${funcMode}</echo>
        <!--删除前一次的测试报告，HTML格式-->
        <delete file="${result.dir}/${test}.html"/>
        <!--删除前一次的测试报告，文本格式-->
        <delete file="${result.dir}/${test}.jtl"/>

        <!--jmeterproperties加载运行时设置，设置配置文件在jmeter.properties中-->
        <!--runremote是否运行远程执行-->
        <!--testplan ="${script.dir}/${test}.jmx"-->
        <jmeter
            jmeterhome="${jmeter.home}"

            jmeterproperties="${jmeter.home}/bin/jmeter.properties"
            runremote="true"
            resultlog="${result.dir}/${test}.jtl"
            jmeterlogfile="${result.dir}/jmeter.log">
            <testplans dir="${script.dir}" includes="${test}.jmx"/>
        <!--
            <jvmarg value="-Xincgc"/>
            <jvmarg value="-Xmx128m"/>
            <jvmarg value="-Dproperty=value"/>
            <jmeterarg value="-qextra.properties"/>
        -->

            <!--测试结果格式output_format，默认为xml-->
            <!--是否记录错误信息on_error，上面定义了${funcMode}=n-->
            <!-- Force suitable defaults -->
            <property name="jmeter.save.saveservice.output_format" value="xml"/>
            <property name="jmeter.save.saveservice.assertion_results" value="all"/>
            <property name="jmeter.save.saveservice.bytes" value="true"/>
            <property name="file_format.testlog" value="${format}"/>
            <property name="jmeter.save.saveservice.response_data.on_error" value="${funcMode}"/>
        </jmeter>
    </target>

    <!--定义依赖包目录-->
    <property name="lib.dir" value="${jmeter.home}/lib"/>

    <!-- Use xalan copy from JMeter lib directory to ensure consistent processing with Java 1.4+ -->
    <path id="xslt.classpath">
        <fileset dir="${lib.dir}" includes="xalan*.jar"/>
        <fileset dir="${lib.dir}" includes="serializer*.jar"/>
    </path>

    <!--定义report任务，此任务依赖于xslt-report,copy-images两个任务-->
    <target name="report" depends="xslt-report,copy-images">
        <echo>Report generated at ${report.datestamp}</echo>
    </target>

    <!--xslt-report，使用xslt将xml文件转换成HTML格式显示-->
    <target name="xslt-report" depends="_message_xalan">
        <tstamp><format property="report.datestamp" pattern="yyyy/MM/dd HH:mm"/></tstamp>
        <xslt
            classpathref="xslt.classpath"
            force="true"
            in="${result.dir}/${test}.jtl"
            out="${script.dir}/${test}.html"
            style="${basedir}/jmeter-results-detail-report${style_version}.xsl">
            <param name="showData" expression="${show-data}"/>
            <param name="titleReport" expression="${report.title}"/>
            <param name="dateReport" expression="${report.datestamp}"/>
        </xslt>
    </target>

    <!-- Copy report images if needed -->
    <target name="copy-images" depends="verify-images" unless="samepath">
        <copy file="${basedir}/expand.png" tofile="${result.dir}/expand.png"/>
        <copy file="${basedir}/collapse.png" tofile="${result.dir}/collapse.png"/>
    </target>

    <target name="verify-images">
        <condition property="samepath">
                <equals arg1="${jmeter.home}" arg2="${basedir}" />
        </condition>
    </target>

    <!-- Check that the xalan libraries are present -->
    <condition property="xalan.present">
          <and>
              <!-- No need to check all jars; just check a few -->
            <available classpathref="xslt.classpath" classname="org.apache.xalan.processor.TransformerFactoryImpl"/>
            <available classpathref="xslt.classpath" classname="org.apache.xml.serializer.ExtendedContentHandler"/>
          </and>
    </condition>

    <target name="_message_xalan" unless="xalan.present">
          <echo>Cannot find all xalan and/or serialiser jars</echo>
        <echo>The XSLT formatting may not work correctly.</echo>
        <echo>Check you have xalan and serializer jars in ${lib.dir}</echo>
    </target>


</project>
